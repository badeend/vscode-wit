{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "WebAssembly Interface Types",
	"patterns": [
		{
			"include": "#declaration"
		},
		{
			"include": "#comment"
		}
	],
	"repository": {
		"declaration": {
			"patterns": [
				{
					"include": "#package-declaration"
				},
				{
					"include": "#use-declaration"
				},
				{
					"include": "#include-declaration"
				},
				{
					"include": "#type-alias-declaration"
				},
				{
					"include": "#world-interface-resource-record-declaration"
				},
				{
					"include": "#variant-enum-flags-declaration"
				},
				{
					"include": "#union-declaration"
				},
				{
					"include": "#constructor-declaration"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#value-declaration"
				},
				{
					"include": "#importexport-interface-id-declaration"
				},
				{
					"include": "#comment"
				}
			]
		},
		"package-declaration": {
			"comment": "Example: `package wasi:clocks@1.2.0`",
			"begin": "\\b(package)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.package.wit"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"include": "#global-id"
				},
				{
					"include": "#comment"
				}
			]
		},
		"use-declaration": {
			"comment": "Example: `use wasi:http/types@1.0.0 as http-types1`",
			"begin": "\\b(use)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.use.wit"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"include": "#as-id"
				},
				{
					"include": "#global-id"
				},
				{
					"include": "#unpack"
				},
				{
					"include": "#comment"
				}
			]
		},
		"include-declaration": {
			"comment": "Example: `include my-using-a with { a as b }`",
			"begin": "\\b(include)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.include.wit"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"match": "with",
					"name": "keyword.other.with.wit"
				},
				{
					"include": "#global-id"
				},
				{
					"include": "#unpack"
				},
				{
					"include": "#comment"
				}
			]
		},
		"type-alias-declaration": {
			"comment": "Example: `type t2 = tuple<u32, u64>`",
			"begin": "\\b(type)\\s+([a-zA-Z_%][a-zA-Z0-9\\-_]*)\\s*(=)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.type.wit"
				},
				"2": {
					"name": "entity.name.type.wit"
				},
				"3": {
					"name": "punctuation.separator.equals"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"include": "#type"
				},
				{
					"include": "#comment"
				}
			]
		},
		"world-interface-resource-record-declaration": {
			"begin": "\\b(world|interface|resource|record)\\s+([a-zA-Z_%][a-zA-Z0-9\\-_]*)?",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.wit"
				},
				"2": {
					"name": "entity.name.type.wit"
				}
			},
			"end": "(?<=[\\}])|(?=[;,\\]\\)}>])|(?=^\\s*(export|import|include|package|type|use|enum|flags|interface|record|resource|union|variant|world))",
			"patterns": [
				{
					"include": "#block-content"
				},
				{
					"include": "#comment"
				}
			]
		},
		"variant-enum-flags-declaration": {
			"begin": "\\b(variant|enum|flags)\\s+([a-zA-Z_%][a-zA-Z0-9\\-_]*)?",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.wit"
				},
				"2": {
					"name": "entity.name.type.wit"
				}
			},
			"end": "(?<=[\\}])|(?=[;,\\]\\)}>])|(?=^\\s*(export|import|include|package|type|use|enum|flags|interface|record|resource|union|variant|world))",
			"patterns": [
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.wit"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.wit"
						}
					},
					"patterns": [
						{
							"comment": "Example: http-types1",
							"match": "([a-zA-Z_%][a-zA-Z0-9\\-_]*)",
							"captures": {
								"1": {
									"name": "variable.other.constant.wit"
								}
							}
						},
						{
							"include": "#tuple"
						},
						{
							"match": ",|;",
							"name": "punctuation.separator.comma.wit"
						},
						{
							"include": "#comment"
						}
					]
				},
				{
					"include": "#comment"
				}
			]
		},
		"union-declaration": {
			"begin": "\\b(union)\\s+([a-zA-Z_%][a-zA-Z0-9\\-_]*)?",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.wit"
				},
				"2": {
					"name": "entity.name.type.wit"
				}
			},
			"end": "(?<=[\\}])|(?=[;,\\]\\)}>])|(?=^\\s*(export|import|include|package|type|use|enum|flags|interface|record|resource|union|variant|world))",
			"patterns": [
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.wit"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.wit"
						}
					},
					"patterns": [
						{
							"include": "#type"
						},
						{
							"match": ",|;",
							"name": "punctuation.separator.comma.wit"
						},
						{
							"include": "#comment"
						}
					]
				},
				{
					"include": "#comment"
				}
			]
		},
		"constructor-declaration": {
			"comment": "Example: `constructor(a1: bool)`",
			"begin": "\\b(constructor)\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.constructor.wit"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"include": "#tuple"
				},
				{
					"include": "#comment"
				}
			]
		},
		"function-declaration": {
			"comment": "Example: `export run: func(a1: bool)`",
			"begin": "\\b((import|export)\\s+)?([a-zA-Z_%][a-zA-Z0-9\\-_]*)(?=\\s*:\\s*(static\\s+)?func)",
			"beginCaptures": {
				"2": {
					"name": "keyword.other.importexport.wit"
				},
				"3": {
					"name": "entity.name.function.wit"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"include": "#type-annotation"
				},
				{
					"include": "#comment"
				}
			]
		},
		"value-declaration": {
			"comment": "Example: `export message: string`",
			"begin": "\\b((import|export)\\s+)?([a-zA-Z_%][a-zA-Z0-9\\-_]*)(?=\\s*:\\s+)",
			"beginCaptures": {
				"2": {
					"name": "keyword.other.importexport.wit"
				},
				"3": {
					"name": "variable.other.wit"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"include": "#type-annotation"
				},
				{
					"include": "#comment"
				}
			]
		},
		"importexport-interface-id-declaration": {
			"comment": "Example: `export wasi:http/types`",
			"begin": "\\b((import|export)\\s+)",
			"beginCaptures": {
				"2": {
					"name": "keyword.other.importexport.wit"
				},
				"3": {
					"name": "variable.other.wit"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"include": "#global-id"
				},
				{
					"include": "#comment"
				}
			]
		},




		"type": {
			"patterns": [
				{
					"include": "#discard-type"
				},
				{
					"include": "#function-type"
				},
				{
					"include": "#interface-type"
				},
				{
					"include": "#named-type"
				},
				{
					"include": "#comment"
				}
			]
		},
		"discard-type": {
			"match": "_(?=[^a-zA-Z0-9_])",
			"name": "keyword.other.discard.wit"
		},
		"function-type": {
			"comment": "Example: `static func(a1: bool) -> u32`",
			"begin": "(\\bstatic\\s+)?\\b(func)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.static.wit"
				},
				"2": {
					"name": "keyword.other.func.wit"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"include": "#return-type-annotation"
				},
				{
					"include": "#tuple"
				},
				{
					"include": "#comment"
				}
			]
		},
		"interface-type": {
			"comment": "Example: `interface { a: u8 }`",
			"begin": "\\b(interface)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.interface.wit"
				}
			},
			"end": "(?<=[\\}])|(?=[;,\\]\\)}>])|(?=^\\s*(export|import|include|package|type|use|enum|flags|interface|record|resource|union|variant|world))",
			"patterns": [
				{
					"include": "#block-content"
				},
				{
					"include": "#comment"
				}
			]
		},
		"named-type": {
			"comment": "Example: `list<u8>`",
			"begin": "([a-zA-Z_%][a-zA-Z0-9\\-_]*)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.type.wit"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"include": "#type-parameter-list"
				},
				{
					"include": "#comment"
				}
			]
		},





		"block-content": {
			"comment": "Example: `{ msg: string }`",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.curlybrace.open.wit"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.curlybrace.close.wit"
				}
			},
			"patterns": [
				{
					"include": "#declaration"
				},
				{
					"match": ",|;",
					"name": "punctuation.separator.comma.wit"
				},
				{
					"include": "#comment"
				}
			]
		},
		"type-parameter-list": {
			"comment": "Example: `<u8, string>`",
			"begin": "\\<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.anglebracket.open.wit"
				}
			},
			"end": "\\>",
			"endCaptures": {
				"0": {
					"name": "punctuation.anglebracket.close.wit"
				}
			},
			"patterns": [
				{
					"include": "#named-parameter"
				},
				{
					"include": "#type"
				},
				{
					"match": ",",
					"name": "punctuation.separator.comma.wit"
				},
				{
					"include": "#comment"
				}
			]
		},
		"tuple": {
			"comment": "Example: `(a1: bool, a2: u32, u32)`",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.open.wit"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.wit"
				}
			},
			"patterns": [
				{
					"include": "#named-parameter"
				},
				{
					"include": "#type"
				},
				{
					"match": ",",
					"name": "punctuation.separator.comma.wit"
				},
				{
					"include": "#comment"
				}
			]
		},
		"named-parameter": {
			"comment": "Example: `a1: bool`",
			"begin": "([a-zA-Z_%][a-zA-Z0-9\\-_]*)(?=\\s*:)",
			"beginCaptures": {
				"1": {
					"name": "variable.parameter.wit"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"include": "#type-annotation"
				},
				{
					"include": "#comment"
				}
			]
		},



		"type-annotation": {
			"comment": "Example: `: list<u8>`",
			"begin": "(:)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.colon.wit"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"include": "#type"
				},
				{
					"include": "#comment"
				}
			]
		},
		"return-type-annotation": {
			"comment": "Example: `-> u32`",
			"begin": "->",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.arrow.wit"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"include": "#tuple"
				},
				{
					"include": "#type"
				},
				{
					"include": "#comment"
				}
			]
		},



		"unpack": {
			"comment": "Example: `{ long-name as ln, abc }`",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.curlybrace.open.wit"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.curlybrace.close.wit"
				}
			},
			"patterns": [
				{
					"match": "([a-zA-Z_%][a-zA-Z0-9\\-_]*)(\\s+(as)\\s+([a-zA-Z_%][a-zA-Z0-9\\-_]*))?",
					"captures": {
						"1": {
							"name": "variable.other.id.wit"
						},
						"3": {
							"name": "keyword.other.as.wit"
						},
						"4": {
							"name": "variable.other.id.wit"
						}
					}
				},
				{
					"match": ",|;",
					"name": "punctuation.separator.comma.wit"
				},
				{
					"include": "#comment"
				}
			]
		},
		"as-id": {
			"comment": "Example: as http-types1",
			"begin": "\\b(as)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.as.wit"
				}
			},
			"end": "(?=[\n\r;,\\]\\)}>])",
			"patterns": [
				{
					"include": "#local-id"
				},
				{
					"include": "#comment"
				}
			]
		},
		"local-id": {
			"comment": "Example: http-types1",
			"match": "([a-zA-Z_%][a-zA-Z0-9\\-_]*)",
			"captures": {
				"1": {
					"name": "variable.other.id.wit"
				}
			}
		},
		"global-id": {
			"comment": "Example: wasi:http/types@1.0.0",
			"patterns": [
				{
					"match": "([a-zA-Z_%][a-zA-Z0-9\\-_]*)(\\:)([a-zA-Z_%][a-zA-Z0-9\\-_]*)((/)([a-zA-Z_%][a-zA-Z0-9\\-_]*))?((@)([a-zA-Z0-9\\-_\\.\\+]*[a-zA-Z0-9_]))?",
					"captures": {
						"1": {
							"name": "string.unquoted.package-namespace.wit"
						},
						"2": {
							"name": "string.unquoted.colon.wit"
						},
						"3": {
							"name": "string.unquoted.package-name.wit"
						},
						"5": {
							"name": "string.unquoted.slash.wit"
						},
						"6": {
							"name": "string.unquoted.interface-name.wit"
						},
						"8": {
							"name": "string.unquoted.at.wit"
						},
						"9": {
							"name": "string.unquoted.package-version.wit"
						}
					}
				},
				{
					"match": "([a-zA-Z_%][a-zA-Z0-9\\-_]*)",
					"captures": {
						"1": {
							"name": "variable.other.id.wit"
						}
					}
				}
			]
		},










		"comment": {
			"patterns": [
				{
					"name": "comment.block.wit",
					"begin": "/\\*",
					"end": "\\*/",
					"patterns": [
						{
							"include": "#markdown"
						}
					]
				},
				{
					"name": "comment.block.documentation.wit",
					"begin": "///",
					"end": "$",
					"patterns": [
						{
							"include": "#markdown"
						}
					]
				},
				{
					"name": "comment.line.double-slash.wit",
					"begin": "//",
					"end": "$",
					"patterns": [
						{
							"include": "#markdown"
						}
					]
				}
			]
		},
		"markdown": {
			"patterns": [
				{
					"match": "\\G\\s*(#+.*)$",
					"captures": {
						"1": {
							"name": "markup.heading.markdown"
						}
					}
				},
				{
					"match": "\\G\\s*((\\>)\\s+)+",
					"captures": {
						"2": {
							"name": "punctuation.definition.quote.begin.markdown"
						}
					}
				},
				{
					"match": "\\G\\s*(\\-)\\s+",
					"captures": {
						"1": {
							"name": "punctuation.definition.list.begin.markdown"
						}
					}
				},
				{
					"match": "\\G\\s*(([0-9]+\\.)\\s+)",
					"captures": {
						"1": {
							"name": "markup.list.numbered.markdown"
						},
						"2": {
							"name": "punctuation.definition.list.begin.markdown"
						}
					}
				},
				{
					"match": "(`.*?`)",
					"captures": {
						"1": {
							"name": "markup.italic.markdown"
						}
					}
				},
				{
					"match": "\\b(__.*?__)",
					"captures": {
						"1": {
							"name": "markup.bold.markdown"
						}
					}
				},
				{
					"match": "\\b(_.*?_)",
					"captures": {
						"1": {
							"name": "markup.italic.markdown"
						}
					}
				},
				{
					"match": "(\\*\\*.*?\\*\\*)",
					"captures": {
						"1": {
							"name": "markup.bold.markdown"
						}
					}
				},
				{
					"match": "(\\*.*?\\*)",
					"captures": {
						"1": {
							"name": "markup.italic.markdown"
						}
					}
				}
			]
		}
	},
	"scopeName": "source.wit"
}